"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var serve_1 = require("./internal/serve/serve");
var runner_1 = require("./internal/runner/runner");
var watcher_1 = require("./internal/watcher/watcher");
function starts(config) {
    var server;
    if (config.serve) {
        server = new serve_1.Server(__assign({}, config.serve, { verbose: !!config.verbose }));
    }
    /** For each of the run patterns do a watch */
    if (config.run && config.run.length) {
        config.run.forEach(function (run, index) {
            var runner = new runner_1.Runner({
                cmd: run.cmd,
                index: index
            });
            /**
             * Logs
             */
            runner.onStdout.on(function (_a) {
                var lines = _a.lines;
                return lines.map(function (line) { return process.stdout.write("[" + index + "] " + line + "\n"); });
            });
            runner.onStderr.on(function (_a) {
                var lines = _a.lines;
                return lines.map(function (line) { return process.stderr.write("[" + index + "] " + line + "\n"); });
            });
            /** Keep alive */
            if (run.keepAlive) {
                runner.onExit.on(function (_a) {
                    var code = _a.code;
                    if (code !== 0) {
                        runner.restart();
                    }
                });
            }
            /** initial run */
            if (config.autorun !== false) {
                runner.restart();
            }
            /** watch run */
            if (run.watch) {
                watcher_1.addWatch(run.watch, function () {
                    /** Prepare for live reload */
                    runner.onExit.once(function (_a) {
                        var code = _a.code;
                        if (code !== 0)
                            return;
                        var reload = run.reload || 'all';
                        if (server) {
                            if (reload === 'all') {
                                server.triggerReload();
                            }
                            else if (reload == 'css') {
                                server.triggerReloadCss();
                            }
                            else if (reload == 'none') {
                            }
                            else {
                                var _ensure = reload;
                            }
                        }
                    });
                    /** Restart */
                    runner.restart();
                });
            }
        });
    }
}
exports.starts = starts;
