/**
 * @module client side code for live reload
 */
"use strict";
var parseUrl = require("parseurl");
var ws_1 = require("ws");
/**
 * Client constants
 */
var prefix = '/__livereload__';
exports.clientJsPath = prefix + '/reload-client.js';
/**
 * Used to trigger reloads
 */
var triggerPath = prefix + '/trigger';
var triggerCSSPath = prefix + '/triggercss';
/**
 * Used for communication between client script and our generated js
 */
var reloadKey = 'r';
var reloadCssKey = 'rcss';
/**
 * The JS we send down to the client to detect live reload requests
 */
var clientJsContent = "\nvar ws\nfunction socket() {\n  ws = new WebSocket(\"ws://\" + window.location.host)\n  ws.onmessage = function (e) {\n    var data = JSON.parse(e.data)\n    if (data." + reloadKey + ") {\n      location.reload()\n    }\n    if (data." + reloadCssKey + ") {\n      refreshCSS()\n    }\n  }\n}\nfunction refreshCSS() {\n  console.log(\"reload css at:\" + new Date())\n  var sheets = document.getElementsByTagName(\"link\");\n  for (var i = 0; i < sheets.length; i++) {\n    var elem = sheets[i];\n    var rel = elem.rel;\n    if (elem.href && elem.href.substring(0, 5) !== \"data:\" && (typeof rel != \"string\" || rel.length == 0 || rel.toLowerCase() == \"stylesheet\")) {\n      var url = elem.href.replace(/(&|\\?)_cacheOverride=\\d+/, \"\");\n      elem.href = url + (url.indexOf(\"?\") >= 0 ? \"&\" : \"?\") + \"_cacheOverride=\" + (new Date().valueOf());\n    }\n  }\n}\nsocket()\nsetInterval(function () {\n  if (ws) {\n    if (ws.readyState !== 1) {\n      socket()\n    }\n  } else {\n    socket()\n  }\n}, 3000)\n";
var Livereload = (function () {
    function Livereload(options) {
        var _this = this;
        this.options = options;
        /** Register this as a connect middleware */
        this.middleware = function (req, res, next) {
            var pathname = parseUrl(req).pathname;
            if (pathname.indexOf(prefix) == -1) {
                next();
                return;
            }
            if (req.method == 'GET' && pathname == exports.clientJsPath) {
                res.writeHead(200);
                res.end(clientJsContent);
                return;
            }
            if (pathname == triggerPath) {
                res.writeHead(200);
                res.end('ok');
                _this.triggerReload();
                return;
            }
            if (pathname == triggerCSSPath) {
                res.writeHead(200);
                res.end('ok');
                _this.triggerReloadCss();
                return;
            }
            next();
        };
        this.wsArray = [];
        /**
         * Starts a websocket server
         */
        this.startWS = function (server) {
            _this.wss = new ws_1.Server({ server: server });
            _this.wss.on('connection', function (ws) {
                _this.wsArray.push(ws);
                ws.on('close', function () {
                    var index = _this.wsArray.indexOf(ws);
                    if (index > -1) {
                        _this.wsArray.splice(index, 1);
                    }
                });
            });
        };
        this.triggerReload = function (delayMs) {
            if (delayMs) {
                _this.writeLog('## delay reload for ' + delayMs + ' ms');
            }
            setTimeout(function () {
                _this.writeLog('## send reload event via websocket to browser');
                _this.wsArray.forEach(function (w) {
                    w.send(JSON.stringify((_a = {}, _a[reloadKey] = Date.now().toString(), _a)), function (e) {
                        if (e) {
                            console.log('websocket send error: ' + e);
                        }
                    });
                    var _a;
                });
            }, delayMs);
        };
        this.triggerReloadCss = function (delayMs) {
            if (delayMs) {
                _this.writeLog('## delay reloadcss for ' + delayMs + ' ms');
            }
            setTimeout(function () {
                this.writeLog('## send reloadcss event via websocket to browser');
                this.wsArray.forEach(function (w) {
                    w.send(JSON.stringify((_a = {}, _a[reloadCssKey] = Date.now().toString(), _a)), function (e) {
                        if (e) {
                            console.log('websocket send error: ' + e);
                        }
                    });
                    var _a;
                });
            }, delayMs);
        };
    }
    Livereload.prototype.writeLog = function (logLine) {
        this.options.verbose && console.log(logLine);
    };
    return Livereload;
}());
exports.Livereload = Livereload;
