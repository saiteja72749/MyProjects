"use strict";
var client_1 = require("./client");
var connect = require("connect");
var serveStatic = require("serve-static");
var http = require("http");
var injector = require('connect-injector');
var Server = (function () {
    function Server(config) {
        var _this = this;
        this.config = config;
        this.triggerReload = function () { return _this.client.triggerReload(); };
        this.triggerReloadCss = function () { return _this.client.triggerReloadCss(); };
        this.app = connect();
        this.client = new client_1.Livereload(config);
        /** use our client's middlware */
        this.app.use(this.client.middleware);
        /** inject live reload script for html files */
        this.app.use(injector(function (req, res) {
            return res.getHeader('content-type') && res.getHeader('content-type').indexOf('text/html') !== -1;
        }, function (data, req, res, callback) {
            callback(null, data.toString().replace('</body>', "<script src=\"" + client_1.clientJsPath + "\"></script></body>"));
        }));
        /** Also serve the directory */
        this.app.use(serveStatic(config.dir || '.'));
        var host = this.config.host || '0.0.0.0';
        var port = this.config.port || 4000;
        /** create http server */
        this.server = http.createServer(this.app);
        this.server.listen(port, host, function () {
            console.log('# listening at http://' + host + ':' + port);
            _this.client.startWS(_this.server); // websocket shares same as our server
        });
        /** Handle server errors */
        this.server.on('error', function (err) {
            if (err.errno === 'EADDRINUSE') {
                console.log('## ERROR: port ' + port + ' is already in use');
                process.exit(2);
            }
            else {
                console.log(err);
            }
        });
    }
    Server.prototype.writeLog = function (logLine) {
        this.config.verbose && console.log(logLine);
    };
    return Server;
}());
exports.Server = Server;
