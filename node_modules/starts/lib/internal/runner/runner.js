"use strict";
var treeKill_1 = require("./treeKill");
var defaultShell_1 = require("./defaultShell");
var utils_1 = require("../utils");
/**
 * Encapsulates a command, allowing you to kill and restart it at will
 */
var Runner = (function () {
    function Runner(config) {
        this.config = config;
        this.onExit = new utils_1.TypedEvent();
        this.onStdout = new utils_1.TypedEvent();
        this.onStderr = new utils_1.TypedEvent();
    }
    Runner.prototype.restart = function () {
        var _this = this;
        /** Kill any previous */
        var previous = this.child;
        if (this.child) {
            this.child = null;
            treeKill_1.kill(previous.pid);
        }
        console.log("[" + this.config.index + "] ## started");
        /** Start a new one */
        var child = defaultShell_1.spawn(this.config.cmd, { stdio: 'pipe' });
        /** Store the new one */
        this.child = child;
        this.child.once('exit', function (code) {
            if (child !== _this.child) {
                return;
            }
            console.log("[" + _this.config.index + "] ## exited with code: " + code);
            _this.onExit.emit({ code: code });
        });
        this.child.stdout.on('data', function (data) {
            if (child !== _this.child) {
                return;
            }
            _this.onStdout.emit({ lines: data.toString().split(/\r\n?|\n/) });
        });
        this.child.stderr.on('data', function (data) {
            if (child !== _this.child) {
                return;
            }
            _this.onStderr.emit({ lines: data.toString().split(/\r\n?|\n/) });
        });
    };
    return Runner;
}());
exports.Runner = Runner;
